---
title: "RFP-ANP"
format: html
---

```{r include=FALSE}
#runtime: shiny
knitr::opts_chunk$set(echo = FALSE)
rm(list = ls())
source("libs.r")
```

```{r include=FALSE, echo=FALSE}
#db anp in localhost
library(RMySQL)  # O RMariaDB

con <- dbConnect(
  RMySQL::MySQL(),
  dbname = "monitoreo",
  host = "localhost",  
  username = "root",
  password = ""
)

df_anp <- dbGetQuery(con, "SELECT * FROM anp")

anp_df = read_excel("C:/Users/israel.monjaraz/OneDrive - Food and Agriculture Organization/Documentos/ProjectCodes/data_anp/anp_tb.xlsx")

```

 
```{r include=FALSE, echo=FALSE}
#get id for each anp:::: dont run
#df_anp_surveyed <- read_excel("data/raw_data/tb_anpencuestadas.xlsx")
#merged_df <- left_join(df_anp_surveyed, df_anp %>% select(nombre_anp = nombre, id_anp), by = "nombre_anp")
#writexl::write_xlsx(merged_df, "data/raw_data/anp_surveyedID03.xlsx")

df_base_rfp = read_excel("data/raw_data/anp_surveyedID03.xlsx")

ANP_frp <- "data/raw_data/RFP_ANP_BD1.xlsx"


namesheets <- excel_sheets(ANP_frp)

#namesheets <- namesheets[-length(namesheets)]
# df_namesheets

#aqui guardo todos los df en mi consola

for (name in namesheets) {
    assign(paste0("df_", name), read_excel(ANP_frp, sheet = name))
}

names_df <- paste0("df_", namesheets)
```

```{r include=FALSE,echo=FALSE}
# cambiar nombre de las columnas
 

for (name in names_df) {
  df <- get(name)
  suffix <- gsub(" ", " ", sub("df_", "", name))
  colnames(df) <- c("cat_manejo", "nombre_anp", suffix)
  assign(name, df)
}
```

```{r include=FALSE, echo=FALSE}
#pegar id en cada df
for (name in names_df) {
df <- get(name)
df <- df %>%
  left_join(df_base_rfp %>% select(nombre_anp, id_anp), by = "nombre_anp")
assign(name, df)
}
```

este ya no lo usé, jajaj sí lo uso, no andaba concentrado ese día X)
```{r include=FALSE, echo=FALSE}
# rename name_df, i use _, without spaces in the names

namesup_df <- gsub(" ", "_", names_df)
for (i in seq_along(names_df)) {
  assign(namesup_df[i], get(names_df[i]))
  #rm(list = names_df[i])    
}

#add colname for anp with more info in her rfp
colnames(`df_Plagas forestales`)[4] <- "nombre_plagas"
colnames(`df_Plagas forestales`)[4] <- "nombre_sp_invasoras"
colnames(`df_Plagas forestales`)[4] <- "motivos_cus"

```

```{r echo=FALSE}
#me sirve para ver todos los tablas 
# for (df_name in namesup_df) {
#   View(get(df_name), title = df_name)
# }
```

# Análisis exploratorio de los datos (Estadística descriptiva)

```{r include=FALSE, echo=FALSE}
#i create final matrix of my datasets
final_df <- df_base_rfp %>%
  select(id_anp, nombre_anp)

for (df_name in names_df) {
  current_df <- get(df_name)
  # we use "valor" for iteratives on all df
  problem_name <- colnames(current_df)[3]   
  colnames(current_df)[3] <- "valor"
  
  # join with id matrix final with all df
  final_df <- final_df %>%
    left_join(current_df %>%
                select(id_anp, valor), 
              by = "id_anp") %>%
    rename(!!problem_name := valor)  # rename of rfp
}

# quitar_acentos <- function(colnames_df) {
#   iconv(colnames_df, from = "UTF-8", to = "ASCII//TRANSLIT")
# }


# colnames(final_df) <- quitar_acentos(colnames(final_df))

risk_data <- final_df %>%
  select(-last_col()) %>%        
  filter(id_anp != "10000000") 
```

```{r include=FALSE, echo=FALSE}
#get total risks 
# risk_data <- final_df %>%
#  select(-last_col()) 

# sum per rows
#risk_data <- risk_data %>%
#  mutate(total_risks_ANP = rowSums(!is.na(risk_data), na.rm = TRUE))

#sum per cols
#tot_anp_risk <- colSums(!is.na(final_df[, -c(1, 2, 39)]))


# head(tot_anp_risk)
# 
# print(final_df[1:5,c(1,2,40)])
```
 
# Data wrangling (Tablas de Riesgos)

```{r}
#reduce in one anp, CADNR 043 and Islas del Golfo

risk_data_reduced <- risk_data %>%
  mutate(id_anp_base = str_remove(id_anp, "[A-Z]$"))

risk_data_combined <- risk_data_reduced %>%
  group_by(id_anp_base) %>%
  summarise(across(
    -c(id_anp, nombre_anp),  
    ~ if (any(. == "Todo el año", na.rm = TRUE)) {
      "Todo el año"    
    } else {
      paste(unique(na.omit(str_split(., ",\\s*") %>% unlist())), collapse = ", ")
    }
  ), .groups = "drop") %>%
  rename(id_anp = id_anp_base)   

 
risk_data_combined <- risk_data_combined %>%
  left_join(anp_df %>% select(ID_ANP, NOMBRE_ANP, CAT_MANEJO, REGION), 
            by = c("id_anp" = "ID_ANP"))%>%
 # mutate(num_anp = row_number()) %>%   
  select(id_anp, NOMBRE_ANP, CAT_MANEJO, REGION, everything()) %>%   
  rename(nombre_anp = NOMBRE_ANP, cat_manejo = CAT_MANEJO, region = REGION)   

risk_data_combined <- risk_data_combined %>%
  mutate(cat_manejo = recode(cat_manejo,
                             "Reserva de la Biosfera" = "RB",
                             "Parque Nacional" = "PN",
                             "Área de Protección de Flora y Fauna" = "APFF",
                             "Santuario" = "SANT",
                             "Área de Protección de los Recursos Naturales" = "APRN",
                             "Monumento Natural" = "MN"))#getwd()
#writexl::write_xlsx(risk_data_combined,"data/clean_data/datos_meses.xlsx")
```

```{r echo=FALSE}
risk_data1 <- risk_data_combined %>%
  mutate(across(
    -c(id_anp, nombre_anp, cat_manejo, region),
    ~ ifelse(!is.na(na_if(., "")), 1, 0)
  ))

risk_data1 <- risk_data1 %>%
  mutate(total_rfp_anp = rowSums(select(., -c(id_anp, nombre_anp, cat_manejo, region)), na.rm = FALSE))



# 1 a 12 de los num de meses que reportan
count_months <- function(x) {
  if (is.na(x)) {
    return(0)
  } else if (x == "Todo el año") {
    return(12)
  } else {
    return(length(unlist(strsplit(x, ",\\s*"))))
  }
}

risk_data2 <- risk_data %>%
  mutate(across(-c(id_anp, nombre_anp), ~ sapply(., count_months)))
```

```{r echo=FALSE}
# writexl::write_xlsx(risk_data, "data/clean_data/matrizF_rfpANP_red.xlsx")
# writexl::write_xlsx(risk_data2, "data/clean_data/matrizrfpanp_codnummeses_red.xlsx")

# risk_data1 <- risk_data1[, c("id_anp","nombre_anp","cat_manejo", "region",
#                              "Sismos", "Remoción_de_masa","Erosion", "Vulcanismo", "Subsidencia",
#                              "Huracanes", "Altas_temperaturas", "Ciclones_tropicales", "Incendios_forestales", "Inundaciones", "Nevadas", "Sequias", "Tormentas_tropicales",
#                              "Blanqueamiento_corales", "Especies_exoticas-invasoras", "Plagas_forestales", "Zoonosis_enfermedades_emergente",
#                              "Derrame_hidrocarburos", "Contaminacion_solidos-liquidos", "Contaminacion_cuerpos_de_agua", "Residuos_peligrosos", "Uso_plaguicidas_agroquimicos", "Vertederos_al_aire_libre",
#                              "Ganaderia_dentro_ANP", "Mineria","Problematica_tenencia_tierra", "Extraccion_material_petreo",
#                              "Construccion_infraestructura",
#                              "Tala_ilegal", "Asent._irregulares_invasiones", "Cambio_uso_de_suelo", "Extraccion-trafico_flora_fauna", "Caza_ilegal", "Pesca_ilegal",  
#                              "Turismo_irregular_malas_practic",
#                              "Inseguridad_delincuencia"
#                              )]

# geologicos <- c("Sismos", "Remoción_de_masa", "Erosión", "Subsidencia", "Vulcanismo")
# hidro <- c("Huracanes", "Altas_temperaturas", "Ciclones_tropicales", 
#            "Incendios_forestales", "Nevadas", "Sequías", "Tormentas_tropicales")
# risk_data1$tot_risk_geologicos <- rowSums(risk_data1[, geologicos], na.rm = TRUE)
# risk_data1$tot_risk_hidro <- rowSums(risk_data1[, hidro], na.rm = TRUE)
# 



#writexl::write_xlsx(risk_data1, "data/clean_data/matrizf_rfpanp_cod01.xlsx")



```

# Análisis de Riesgos Geológicos

-   Sismos
-   Remoción_de_masa
-   Erosión
-   Subsidencia
-   Vulcanismo

```{r echo=FALSE}
library(dplyr)

df_riesgos_geologicos_mes <- risk_data_combined %>%
  select(id_anp, nombre_anp, cat_manejo, region, Sismos, 'Remoción de masa', Erosión, Subsidencia, Vulcanismo)


df_riesgos_geologicos_01 = df_riesgos_geologicos_mes %>%
  mutate(across(
    -c(id_anp, nombre_anp, cat_manejo, region),
    ~ ifelse(!is.na(na_if(., "")), 1, 0)
    ))
colnames(df_riesgos_geologicos_01) = c("id_anp","nombre_anp","cat_manejo",
                                       "region","Sismos","Remoción en masa","Erosión",
                                       "Subsidencia","Vulcanismo")
colnames(df_riesgos_geologicos_mes) = c("id_anp","nombre_anp","cat_manejo",
                                       "region","Sismos","Remoción en masa","Erosión",
                                       "Subsidencia","Vulcanismo")

col_rg = "#c6825b"

cols_levels_rg = c("#7c896f","#deb9a9", "#d49d7f", "#895D2B", "#cc8245","#a45024")  
color_degr = rev(c("#8b5a3e" , "#d2a679", "#d8b89a", "#e1c1b8", "#e7d3c6"))

```



```{r eval=FALSE}
df_riesgos_geologicos_01_tot <- df_riesgos_geologicos_01 %>%
  mutate(total_rg = rowSums(select(., -c(id_anp, nombre_anp, cat_manejo, region)), na.rm = FALSE))

risk_count_rg <- df_riesgos_geologicos_01_tot %>%
  count(total_rg) %>%
  filter(total_rg <= 5) 


#head(risk_count_rg)

hchart <-highchart() %>%
  hc_chart(type = "column") %>%
  hc_title(text = "Número de Riesgos geológicos por ANP ") %>%
  hc_add_series(
    name = "ANP",
    data = risk_count_rg$n,
   #colorByPoint = TRUE,
    color = col_rg,
    dataLabels = list(enabled = TRUE,
                      style = list(
                        color = 'black',
                        fontSize = '13px'
                        )
                      )
  ) %>%
   hc_tooltip(pointFormat = "<b>{point.y} ANP</b> con <b>{point.category} riesgos</b>")%>%
  hc_xAxis_multiples(
      list(
      title = list(text = "Número de riesgos",
                   style = list(color = 'black', 
                                fontSize = '16px')),
      labels = list(style = list(fontWeight = "bold",
                                 color = 'black', 
                                 fontSize = '13px'))
    )
    
    
  ) %>%
  hc_yAxis_multiples(
      list(
      title = list(text = "Número de ANP",
                   style = list(color = 'black', 
                                fontSize = '16px')),
      labels = list(style = list(fontWeight = "bold",
                                 color = 'black', 
                                 fontSize = '13px'))
    )
  )

hchart
```
 



```{r eval=FALSE}
rg_summ <- df_riesgos_geologicos_01 %>%
  summarise(across(Sismos:Vulcanismo, sum)) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "total") %>%
  mutate(color = c(rep(col_rg,5))[1:n()]) %>%
  arrange(total)  # menor a mayor
```


```{r eval=FALSE}
hchart(
  rg_summ, 
  "pie", 
  hcaes(x = variable, y = total)
) %>%
  hc_title(
    text = "Número de ANP en las que ocurre un tipo de riesgo geológico",
    style = list(fontSize = "20px", fontWeight = "bold", color = "black")   
  ) %>%
  hc_tooltip(
    pointFormat = "Riesgo: {point.name}<br>ANP Reportando: {point.y}"
  ) %>%
  hc_plotOptions(
    pie = list(
      dataLabels = list(
        enabled = TRUE, 
        format = '{point.name}: {point.y} ANP',
        style = list(fontSize = "14px", fontWeight = "bold", color = "black")   
      ),
      colors = color_degr, 
      innerSize = "50%"
    )
  ) %>%
  hc_xAxis(
    labels = list(style = list(fontWeight = "bold", color = "black"))   
  ) %>%
  hc_yAxis(
    labels = list(style = list(fontWeight = "bold", color = "black"))  
  )

```

```{r eval=FALSE}
hchart(rg_summ, "column", hcaes(x = variable, y = total, color = color)) %>%
  hc_title(text = "Número de ANP que reportaron un tipo de Riesgo geológico") %>%
  hc_xAxis(title = list(text = "Riesgos geológicos", style = list(fontSize = "16px",
                                                                  color = "black")),
           labels = list(style = list(fontSize = "14px",
                                      color = "black"))) %>%
  hc_yAxis(title = list(text = "Número de ANP", style = list(fontSize = "16px",
                                                             color = "black"
                                                             )),
           labels = list(style = list(fontSize = "14px",
                                      color = "black"))) %>%
  hc_plotOptions(column = list(
    dataLabels = list(enabled = TRUE, style = list(fontSize = "16px"))
  )) %>%
  hc_tooltip(pointFormat = "Riesgo: {point.variable}<br>Número de ANP con el riesgo: {point.y}")
```
 
 

Gráfico 3. Número de ANP y ocurrencia durante todo el año

El Gráfico 3 ilustra los riesgos geológicos reportados por las ANP a lo largo del año, de las 110 ANP que identificaron la erosión como un riesgo, más del 60 % (68 ANP) consideran que este problema es persistente durante todo el año. En el caso de los sismos, de las 37 ANP que los reportan, 30 indican que este riesgo también prevalece continuamente, de manera similar, los Subsidencia son considerados un riesgo constante en 9 ANP, por otro lado, el vulcanismo en 6 ANP y los Remoción_de_masa en solo 2 ANP, a pesar de que 45 ANP los identifican estos últimos como un riesgo.


 
 
 
# Riesgos hidrometeorológicos

 


# función gráficas

```{r}
library(dplyr)
library(tidyr)
library(highcharter)

 
create_risk_charts <- function(data, cols, palette, chart_title_pie, color_levels, chart_title_total, ejex) {
 
  df_filtered <- data %>%
    select(id_anp, nombre_anp, cat_manejo, region, all_of(cols))
  
  df_binary <- df_filtered %>%
    mutate(across(
      -c(id_anp, nombre_anp, cat_manejo, region),
      ~ ifelse(!is.na(na_if(., "")), 1, 0)
    ))
  
  dftot_out <- df_binary %>%
  mutate(total_riesgo= rowSums(select(., -c(id_anp, nombre_anp, cat_manejo, region)),
                            na.rm = FALSE))
    
  
  df_summary <- df_binary %>%
    summarise(across(all_of(cols), sum)) %>%
    pivot_longer(everything(), names_to = "variable", values_to = "total") %>%
    mutate(color = rep(palette, length.out = n())) %>%
    arrange(total)
  
 
  df_bin_tot <- df_binary %>%
  mutate(total_rg = rowSums(select(., -c(id_anp, nombre_anp, cat_manejo, region)), na.rm = FALSE))

  risk_count_rg <- df_bin_tot %>%
    count(total_rg) #%>%
   # filter(total_rg <= 5) 
  
  #head(risk_count_rg)
  
  chart_tot <-highchart() %>%
    hc_chart(type = "column") %>%
    hc_title(text = chart_title_total) %>%
    hc_add_series(
      name = "ANP",
      data = risk_count_rg$n,
     #colorByPoint = TRUE,
      color = palette,
      dataLabels = list(enabled = TRUE,
                        style = list(
                          color = 'black',
                          fontSize = '22px'
                          )
                        )
    ) %>%
     hc_tooltip(pointFormat = "<b>{point.y} ANP</b> con <b>{point.category} riesgos</b>")%>%
    hc_xAxis_multiples(
        list(
        title = list(text = ejex,
                     style = list(color = 'black', 
                                  fontSize = '18px')),
        labels = list(style = list(fontWeight = "bold",
                                   color = 'black', 
                                   fontSize = '18px'))
      )
      
      
    ) %>%
    hc_yAxis_multiples(
        list(
        title = list(text = "Número de ANP",
                     style = list(color = 'black', 
                                  fontSize = '18px')),
        labels = list(style = list(fontWeight = "bold",
                                   color = 'black', 
                                   fontSize = '18px'))
      )
    )%>%
  hc_plotOptions(
    column = list(
      pointPadding = 0.05,  # bancho de barras
      borderWidth = 0     # quitar borde de la barra
    )
  )
  
  pie_chart <- hchart(
    df_summary, 
    "pie", 
    hcaes(x = variable, y = total)
  ) %>%
    hc_title(
      text = chart_title_pie,
      style = list(fontSize = "22px", fontWeight = "bold", color = "black")
    ) %>%
    hc_tooltip(
      pointFormat = "Riesgo: {point.name}<br>ANP Reportando: {point.y}"
    ) %>%
    hc_plotOptions(
      pie = list(
        dataLabels = list(
          enabled = TRUE, 
          format = '{point.name}: {point.y} ANP',
          style = list(fontSize = "17px", fontWeight = "bold", color = "black")
        ),
        colors = if(length(df_summary$variable) == 1) color_levels[1] else color_levels,
        #colors = color_levels, 
        innerSize = "50%"
      )
    ) 
  
 # request input in function: chart_title_col,  
  
  
  # column_chart <- hchart(
  #   df_summary, 
  #   "column", 
  #   hcaes(x = variable, y = total, color = color)
  # ) %>%
  #   hc_title(
  #     text = chart_title_col
  #   ) %>%
  #   hc_xAxis(
  #     title = list(text = ejex, style = list(fontSize = "16px", color = "black")),
  #     labels = list(style = list(fontSize = "14px", color = "black"))
  #   ) %>%
  #   hc_yAxis(
  #     title = list(text = "Número de ANP", style = list(fontSize = "16px", color = "black")),
  #     labels = list(style = list(fontSize = "14px", color = "black"))
  #   ) %>%
  #   hc_plotOptions(
  #     column = list(dataLabels = list(enabled = TRUE, style = list(fontSize = "16px")))
  #   ) %>%
  #   hc_tooltip(
  #     pointFormat = "Riesgo: {point.variable}<br>Número de ANP con el riesgo: {point.y}"
  #   )
  # 
  return(list(pie_chart = pie_chart, charttotal = chart_tot, summary = dftot_out, df_meses = df_filtered))
}
```

## fn una sola gráfica

```{r}
charts_rfp_onetype <- function(data, column, title, color_levels) {
 
  df_filtered <- data %>%
    select(id_anp, nombre_anp, cat_manejo, region, all_of(column))
  
  df_binary <- df_filtered %>%
    mutate(across(
      -c(id_anp, nombre_anp, cat_manejo, region),
      ~ ifelse(!is.na(na_if(., "")), 1, 0)
    ))
  
   # dftot_out <- df_binary %>%
   #   mutate( 
   #     total_riesgo = rowSums(
   #       select(., -c(id_anp, nombre_anp, cat_manejo, region)),
   #       na.rm = FALSE)
   #     )
    
  
  # df_summary <- df_binary %>%
  #   summarise(across(all_of(cols), sum)) %>%
  #   pivot_longer(everything(), names_to = "variable", values_to = "total") %>%
  #   #mutate(color = rep(palette, length.out = n())) %>%
  #   arrange(total)
  # 
 
  df_bin_tot <- df_binary %>%
  mutate(total_rg = rowSums(select(., -c(id_anp, nombre_anp, cat_manejo, region)), na.rm = FALSE))

  
  
  
  risk_count_rg <- df_bin_tot %>%
    count(total_rg)# %>%
    #filter(total_rg <= 5) 
   
  risk_count_rg$report = c(("Sin reporte "), "Con reporte")
  
  #head(risk_count_rg)
  
  chart_01 <- hchart(
    risk_count_rg, 
    "pie", 
    hcaes(x = total_rg, y = n)
  ) %>%
    hc_title(
      text = title,
      style = list(fontSize = "22px", fontWeight = "bold", color = "black")
    ) %>%
    hc_tooltip(
      pointFormat = "Riesgo: {point.name}<br>ANP Reportadas: {point.y}"
    ) %>%
    hc_plotOptions(
      pie = list(
        dataLabels = list(
          enabled = TRUE, 
          format = '{point.report}: {point.y} ANP',
          style = list(fontSize = "16px", fontWeight = "bold", color = "black")
        ),
        colors = color_levels,#if(length(df_summary$variable) == 1) color_levels[1] else color_levels,
        #colors = color_levels, 
        innerSize = "50%"
      )
    )
  
  return(list(chart=chart_01, df = risk_count_rg))
}


```

# Riesgos geológicos

```{r fig.dim=c(4,4)}
geologicos <- c("Sismos", "Remoción de masa", "Erosión", "Subsidencia", "Vulcanismo")

palette_rg <- "#c6825b"
color_degr_rg <- rev(c("#8b5a3e", "#d2a679", "#d8b89a", "#e1c1b8", "#e7d3c6"))
charts <- create_risk_charts(
  data = risk_data_combined,
  cols = geologicos,
  palette = palette_rg,
  chart_title_pie = "Número de ANP en las que ocurre un tipo de riesgo geológico",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = color_degr_rg,
  ejex = "Riesgos Geológicos"
)

# Mostrar los gráficos
charts$pie_chart
charts$charttotal
```

# Riesgos hidro-meteorológicos

```{r fig.dim=c(4,4)}
hidro <- c("Huracanes", "Altas temperaturas", "Ciclones tropicales", 
           "Inundaciones", "Nevadas", "Sequías", "Tormentas tropicales")
 
palette_rg <- "#6493e1"
color_degr_rg <- (c("#f0f8ff","#d0e5f7","#a1c3f1","#6493e1","#3c66d1","#1a48b6","#13368a","#0d2661","#09173e"))

charts <- create_risk_charts(
  data = risk_data_combined,
  cols = hidro,
  palette = palette_rg,
  chart_title_pie = "Número de ANP en las que ocurre un tipo de Riesgo Hidro-meteorológico",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = color_degr_rg,
  ejex = "Riesgos Hidro-meteorológicos"
)

 
charts$pie_chart
charts$charttotal
# 
# charts$summary$Totales <- rowSums(charts$summary[, c("Huracanes", "Altas temperaturas", "Ciclones tropicales", "Inundaciones", "Nevadas", "Sequías", "Tormentas tropicales")], na.rm = TRUE)
```

# Ecosistémicos


```{r fig.dim=c(6,6)}
ecosistemicos <- c("Blanqueamiento de corales" , "Especies Exóticas invasoras" , "Plagas forestales", "Zoonosis,enfermedades emergente")
 
palette_ecosis <- "#63783d"
cols_ecosis<- (c("#aed16f", "#63783d", "#37591d", "#0d1f07"))
charts <- create_risk_charts(
  data = risk_data_combined,
  cols = ecosistemicos,
  palette = palette_ecosis,
  chart_title_pie = "Número de ANP en las que ocurre un tipo de Riesgo Ecosistémico",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = cols_ecosis,
  ejex = "Riesgos Ecosistémicos"
)


charts$pie_chart
charts$charttotal

view(charts$summary)
view(charts$df_meses)

```



# Incendios forestales

```{r}
charts_incendios=charts_rfp_onetype(data =  risk_data_combined,
                                    column =  "Incendios forestales",
                                    title =   "Número de ANP en las que ocurren Incendios forestales",
                                    color_levels = c("#f79326", "#f1473a")
                                    )

 

charts_incendios$df
charts_incendios$chart
view(charts_incendios$df)

```



# Factores de presión antrópicos

```{r fig.dim=c(6,6)}
fp_antropicos <- c("Contaminación_sólidos-líquidos", "Contaminación cuerpos de agua", "Derrame hidrocarburos", 
           "Uso plaguicidas_agroquímicos", "Vertederos al aire libre")
 
palette_rg <- "#EE9572"
color_degr_rg <- rev(c("#8B5742", "#CD8162", "#EE9572","#FFA07A","#EECBAD"))

charts <- create_risk_charts(
  data = risk_data_combined,
  cols = fp_antropicos,
  palette = palette_rg,
  chart_title_pie = "Número de ANP en las que ocurre un tipo de Factor de presión antrópico",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = color_degr_rg,
  ejex = "Factores de presión antrópicos"
)
charts$pie_chart
charts$charttotal
charts$df_meses
 

datatable(
  charts$summary,
  rownames = FALSE,                # No mostrar la columna de índices
  filter = "top",                  # Agregar filtro por columna en la parte superior
  options = list(
    pageLength = 5,                # Número de filas por página
    autoWidth = TRUE,              # Ajuste automático de ancho
    dom = 'Bfrtip',                # Controles disponibles (B: botones, f: filtro, r: información, t: tabla, p: paginación)
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), # Botones adicionales
    columnDefs = list(
      list(width = '150px', targets = 4:8) # Ajustar ancho de columnas específicas
    )
  ),
  extensions = c("Buttons", "Responsive") # Extensiones para botones y diseño responsivo
) %>%
  formatStyle(
    columns = 1:8,
    fontSize = '12px',
    color = "black",
    backgroundColor = 'white'
  )


```





# Actividades económicas: primarias

```{r}
primarias <- c("Ganadería dentro ANP", "Minería", "Extracción material pétreo", "Construcción infraestructura","Turismo irregular" )
 
palette_rg <- "#CD9B9B"
color_degr_rg <- rev(c("#8B6969","#CD9B9B", "#EEB4B4", "#FFC1C1", "pink"))

charts <- create_risk_charts(
  data = risk_data_combined,
  cols = primarias,
  palette = palette_rg,
  chart_title_pie = "Número de ANP en las que ocurren Actividades económicas: primarias",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = color_degr_rg,
  ejex = ""
)
charts$pie_chart
charts$charttotal
datatable(
  charts$summary,
  rownames = FALSE,                # No mostrar la columna de índices
  filter = "top",                  # Agregar filtro por columna en la parte superior
  options = list(
    pageLength = 5,                # Número de filas por página
    autoWidth = TRUE,              # Ajuste automático de ancho
    dom = 'Bfrtip',                # Controles disponibles (B: botones, f: filtro, r: información, t: tabla, p: paginación)
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), # Botones adicionales
    columnDefs = list(
      list(width = '150px', targets = 4:8) # Ajustar ancho de columnas específicas
    )
  ),
  extensions = c("Buttons", "Responsive") # Extensiones para botones y diseño responsivo
) %>%
  formatStyle(
    columns = 1:8,
    fontSize = '12px',
    color = "black",
    backgroundColor = 'white'
  )


```

 


# Ilícitos ambientales

```{r}
ilegales <- c("Tala ilegal", "Pesca ilegal", "Asent. irregulares invasiones", "Extracción-tráfico_flora_fauna", "Caza ilegal")
 
palette_rg <- "#DAA520" 

color_degr_rg = rev(c("#e6d4ef","#a2b59a","#ee9b4d","#dd7244","#903432"))

charts <- create_risk_charts(
  data = risk_data_combined,
  cols = ilegales,
  palette = palette_rg,
  chart_title_pie = "Número de ANP en las que ocurren Actividades económicas: primarias",
  chart_title_total = "Número de riesgos en las ANP",
  color_levels = color_degr_rg,
  ejex = ""
)
charts$pie_chart
charts$charttotal


datatable(
  charts$summary,
  rownames = FALSE,                # No mostrar la columna de índices
  filter = "top",                  # Agregar filtro por columna en la parte superior
  options = list(
    pageLength = 5,                # Número de filas por página
    autoWidth = TRUE,              # Ajuste automático de ancho
    dom = 'Bfrtip',                # Controles disponibles (B: botones, f: filtro, r: información, t: tabla, p: paginación)
    buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), # Botones adicionales
    columnDefs = list(
      list(width = '150px', targets = 4:8) # Ajustar ancho de columnas específicas
    )
  ),
  extensions = c("Buttons", "Responsive") # Extensiones para botones y diseño responsivo
) %>%
  formatStyle(
    columns = 1:8,
    fontSize = '12px',
    color = "black",
    backgroundColor = 'white'
  )


```


# Problemática_tenencia tierra

```{r}

charts_tenenciatierra=charts_rfp_onetype(data =  risk_data_combined,
                                    column =  "Problemática_tenencia tierra",
                                    title =   "Número de ANP en las que ocurren problemas de la tencia de la tierra",
                                    color_levels = c("#778899", "#191970")
                                    )

 
 
charts_tenenciatierra$chart
```

# Crimen organizado

```{r}

charts_delincuencia=charts_rfp_onetype(data =  risk_data_combined,
                                    column =  "Inseguridad delincuencia",
                                    title =   "Número de ANP en las que ocurren problemas de delincuencia",
                                    color_levels = c("#CDB7B5", "#B22222")
                                    )



charts_delincuencia$chart

```



# Cambio y uso de suelo y vegetación.

```{r}

charts_cusv=charts_rfp_onetype(data =  risk_data_combined,
                                    column =  "Cambio uso de suelo",
                                    title =   "Número de ANP que reportaron Cambio de uso del suelo y vegetación",
                                    color_levels = c("#BEBEBE", "#8B7355")
                                    )



charts_cusv$chart

```







 










